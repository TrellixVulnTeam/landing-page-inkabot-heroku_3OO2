{"ast":null,"code":"import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\n\nfunction shareReplayOperator(_ref) {\n  var _ref$bufferSize = _ref.bufferSize,\n      bufferSize = _ref$bufferSize === void 0 ? Number.POSITIVE_INFINITY : _ref$bufferSize,\n      _ref$windowTime = _ref.windowTime,\n      windowTime = _ref$windowTime === void 0 ? Number.POSITIVE_INFINITY : _ref$windowTime,\n      useRefCount = _ref.refCount,\n      scheduler = _ref.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next: function next(value) {\n          subject.next(value);\n        },\n        error: function error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n    }\n\n    var innerSub = subject.subscribe(this);\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n} //# sourceMappingURL=shareReplay.js.map","map":{"version":3,"sources":["E:/Inkabots/paginaweb_inkabots/node_modules/rxjs/_esm2015/internal/operators/shareReplay.js"],"names":["ReplaySubject","shareReplay","configOrBufferSize","windowTime","scheduler","config","bufferSize","refCount","source","lift","shareReplayOperator","Number","POSITIVE_INFINITY","useRefCount","subject","subscription","hasError","isComplete","shareReplayOperation","subscribe","next","value","error","err","complete","undefined","innerSub","add","unsubscribe"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,OAAO,SAASC,WAAT,CAAqBC,kBAArB,EAAyCC,UAAzC,EAAqDC,SAArD,EAAgE;AACnE,MAAIC,MAAJ;;AACA,MAAIH,kBAAkB,IAAI,OAAOA,kBAAP,KAA8B,QAAxD,EAAkE;AAC9DG,IAAAA,MAAM,GAAGH,kBAAT;AACH,GAFD,MAGK;AACDG,IAAAA,MAAM,GAAG;AACLC,MAAAA,UAAU,EAAEJ,kBADP;AAELC,MAAAA,UAAU,EAAVA,UAFK;AAGLI,MAAAA,QAAQ,EAAE,KAHL;AAILH,MAAAA,SAAS,EAATA;AAJK,KAAT;AAMH;;AACD,SAAO,UAACI,MAAD;AAAA,WAAYA,MAAM,CAACC,IAAP,CAAYC,mBAAmB,CAACL,MAAD,CAA/B,CAAZ;AAAA,GAAP;AACH;;AACD,SAASK,mBAAT,OAAiJ;AAAA,6BAAlHJ,UAAkH;AAAA,MAAlHA,UAAkH,gCAArGK,MAAM,CAACC,iBAA8F;AAAA,6BAA3ET,UAA2E;AAAA,MAA3EA,UAA2E,gCAA9DQ,MAAM,CAACC,iBAAuD;AAAA,MAA1BC,WAA0B,QAApCN,QAAoC;AAAA,MAAbH,SAAa,QAAbA,SAAa;AAC7I,MAAIU,OAAJ;AACA,MAAIP,QAAQ,GAAG,CAAf;AACA,MAAIQ,YAAJ;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,UAAU,GAAG,KAAjB;AACA,SAAO,SAASC,oBAAT,CAA8BV,MAA9B,EAAsC;AACzCD,IAAAA,QAAQ;;AACR,QAAI,CAACO,OAAD,IAAYE,QAAhB,EAA0B;AACtBA,MAAAA,QAAQ,GAAG,KAAX;AACAF,MAAAA,OAAO,GAAG,IAAId,aAAJ,CAAkBM,UAAlB,EAA8BH,UAA9B,EAA0CC,SAA1C,CAAV;AACAW,MAAAA,YAAY,GAAGP,MAAM,CAACW,SAAP,CAAiB;AAC5BC,QAAAA,IAD4B,gBACvBC,KADuB,EAChB;AAAEP,UAAAA,OAAO,CAACM,IAAR,CAAaC,KAAb;AAAsB,SADR;AAE5BC,QAAAA,KAF4B,iBAEtBC,GAFsB,EAEjB;AACPP,UAAAA,QAAQ,GAAG,IAAX;AACAF,UAAAA,OAAO,CAACQ,KAAR,CAAcC,GAAd;AACH,SAL2B;AAM5BC,QAAAA,QAN4B,sBAMjB;AACPP,UAAAA,UAAU,GAAG,IAAb;AACAF,UAAAA,YAAY,GAAGU,SAAf;AACAX,UAAAA,OAAO,CAACU,QAAR;AACH;AAV2B,OAAjB,CAAf;AAYH;;AACD,QAAME,QAAQ,GAAGZ,OAAO,CAACK,SAAR,CAAkB,IAAlB,CAAjB;AACA,SAAKQ,GAAL,CAAS,YAAM;AACXpB,MAAAA,QAAQ;AACRmB,MAAAA,QAAQ,CAACE,WAAT;;AACA,UAAIb,YAAY,IAAI,CAACE,UAAjB,IAA+BJ,WAA/B,IAA8CN,QAAQ,KAAK,CAA/D,EAAkE;AAC9DQ,QAAAA,YAAY,CAACa,WAAb;AACAb,QAAAA,YAAY,GAAGU,SAAf;AACAX,QAAAA,OAAO,GAAGW,SAAV;AACH;AACJ,KARD;AASH,GA5BD;AA6BH,C,CACD","sourcesContent":["import { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let config;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        config = configOrBufferSize;\n    }\n    else {\n        config = {\n            bufferSize: configOrBufferSize,\n            windowTime,\n            refCount: false,\n            scheduler\n        };\n    }\n    return (source) => source.lift(shareReplayOperator(config));\n}\nfunction shareReplayOperator({ bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, refCount: useRefCount, scheduler }) {\n    let subject;\n    let refCount = 0;\n    let subscription;\n    let hasError = false;\n    let isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next(value) { subject.next(value); },\n                error(err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete() {\n                    isComplete = true;\n                    subscription = undefined;\n                    subject.complete();\n                },\n            });\n        }\n        const innerSub = subject.subscribe(this);\n        this.add(() => {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\n                subscription.unsubscribe();\n                subscription = undefined;\n                subject = undefined;\n            }\n        });\n    };\n}\n//# sourceMappingURL=shareReplay.js.map"]},"metadata":{},"sourceType":"module"}